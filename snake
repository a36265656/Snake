#include <stdio.h>
#include <windows.h>//視窗、游標調整
#include <conio.h>//鍵盤監控
#include <time.h>
//定義參數
#define MAP_MODE "◆"
#define FOOD "★"
#define SNAKE_BODY "●"
#define SNAKE_HEAD "○"
#define MAP_WIDTH 80
#define MAP_HEIGHT 30
#define MOVE_CENTER 20
#define INITIAL_LEN 5
#define MAXLENGTH 100
//食物
struct Food { int x; int y; }; struct Food food;
//蛇身
struct Snake { int a[MAXLENGTH]; int b[MAXLENGTH]; int CurrentLength; }; struct Snake snake;
//方向
int direct = 'a';
//判斷是否需要生成食物(吃or還沒吃到)
int flag = 1;

void createMap();
void createFood();
void initialSnake();
void moveSnake();
/*void setConsoleSize(int width, int height) { //擴大視窗
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    COORD bufferSize = { width, height };
    SetConsoleScreenBufferSize(hConsole, bufferSize);
}*/
void gotoxy(int x, int y) {  //移動游標
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

void createMap() {
    for (int i = 0 + MOVE_CENTER; i < MAP_WIDTH + MOVE_CENTER; i += 2) { //上下界線
        gotoxy(i, 0);//上邊
        printf(MAP_MODE);
        gotoxy(i, MAP_HEIGHT - 1);//下邊
        printf(MAP_MODE);
    }

    for (int i = 0; i < MAP_HEIGHT; i++) {//左右界線
        gotoxy(0 + MOVE_CENTER, i);//左邊
        printf(MAP_MODE);
        gotoxy(MAP_WIDTH + MOVE_CENTER, i);//右邊
        printf(MAP_MODE);
    }
    //初始化蛇
    initialSnake();
}

void initialSnake() {
    snake.CurrentLength = INITIAL_LEN;
    snake.a[0] = MAP_WIDTH / 2 + MOVE_CENTER;
    snake.b[0] = MAP_HEIGHT / 2;
    //蛇頭繪製
    gotoxy(snake.a[0], snake.b[0]);
    printf(SNAKE_HEAD);
    //蛇身繪製
    for (int i = 1; i < snake.CurrentLength; i++) {
        snake.a[i] = snake.a[i - 1] + 2;
        snake.b[i] = snake.b[i - 1];
        gotoxy(snake.a[i], snake.b[i]);
        printf(SNAKE_BODY);
    }
}

void createFood() { //隨機出現食物
    srand(clock());   //srand(time(NULL));
    int isCreate = 1;  //表示食物判斷為可以生成                                                   //-4邊界厚度  /2(寬度定義和實際x有倍數落差) *2(返回實際x數值)
    food.x = (rand() % ((MAP_WIDTH - 4) / 2) * 2) + 2 + MOVE_CENTER;   //((寬度-4)/2)*2+2(貼近邊界)+置中位移
    food.y = rand() % (MAP_HEIGHT - 2) + 1;     //扣掉上下邊界(+1是因為從0開始算)
    if (food.x % 2 == 0) {        //因蛇位移量為2因此而限制食物X軸生成位置為偶數                                  
        for (int i = 0; i < snake.CurrentLength; i++) {
            if (snake.a[i] == food.x && snake.b[i] == food.y) {      //食物不能在蛇身上
                isCreate = 0;
            }
            if (isCreate) {
                gotoxy(food.x, food.y);
                printf(FOOD);
                flag = 0;
            }
        }
    }
}

void moveSnake() {
    if (flag) {
        createFood();
    }
    if (_kbhit()) {
        fflush(stdin);
        direct = _getch();
    }
    int newHeadX = snake.a[0];
    int newHeadY = snake.b[0];
    switch (direct) {
    case 'w':
    case 'W':
    case 72:
        newHeadY--;
        break;
    case 's':
    case 'S':
    case 80:
        newHeadY++;
        break;
    case 'a':
    case 'A':
    case 75:
        newHeadX -= 2;
        break;
    case 'd':
    case 'D':
    case 77:
        newHeadX += 2;
        break;
    }    
    // 檢查新的頭部位置是否與身體碰撞
    for (int i = 1; i < snake.CurrentLength; i++) {
        if (newHeadX == snake.a[i] && newHeadY == snake.b[i]) {
            gotoxy((MAP_WIDTH - 3) / 2 + MOVE_CENTER, MAP_HEIGHT / 2);
            printf("遊戲結束!\n");
            gotoxy(101, 29);
            exit(0);
        }
    }
    //移動蛇身繪製
    gotoxy(snake.a[snake.CurrentLength - 1], snake.b[snake.CurrentLength - 1]);
    printf(" ");
    for (int i = snake.CurrentLength - 1; i > 0; i--) {
        snake.a[i] = snake.a[i - 1];
        snake.b[i] = snake.b[i - 1];
        gotoxy(snake.a[i - 1], snake.b[i - 1]);
        printf(SNAKE_BODY);
    }
    //移動後蛇頭繪製
    snake.a[0] = newHeadX;
    snake.b[0] = newHeadY;
    gotoxy(snake.a[0], snake.b[0]);
    printf(SNAKE_HEAD);
    gotoxy(101, 29);
    // 蛇頭碰邊界
    if (snake.a[0] <= 0 + MOVE_CENTER || snake.a[0] >= MAP_WIDTH + MOVE_CENTER ||
        snake.b[0] <= 0 || snake.b[0] >= MAP_HEIGHT - 1) {
        gotoxy((MAP_WIDTH - 3) / 2 + MOVE_CENTER, MAP_HEIGHT / 2);
        printf("遊戲結束!\n");
        gotoxy(101, 29);
        exit(0);
    }
    //蛇頭與食物重疊
    if (snake.a[0] == food.x && snake.b[0] == food.y) {
        snake.CurrentLength+=2;
        flag = 1;
    }
}

int main() {
    createMap();  //srand(time(NULL) + clock()); //setConsoleSize(120, 45);
    while (1) {
        Sleep(100);
        if (flag) {
            createFood();
        }
        moveSnake();
    }
    return 0;
}
